{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_PROFILE","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getUsers","axios","get","then","result","setState","profiles","data","user","isLoading","state","games","_this2","getGames","console","log","react_default","a","createElement","username","values","map","game","key","id","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAMMA,EAAc,oEAwDLC,cApDd,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASPQ,SAAW,WACVC,IAAMC,IAAIZ,GACRa,KAAK,SAAAC,GAAM,OAAKX,EAAKY,SAAS,CAACC,SAASF,EAAOG,KAAKC,KAAMC,WAAW,OATvEhB,EAAKiB,MAAQ,CACZJ,SAAU,GACVK,MAAO,GACPF,WAAW,GANKhB,0EAgBP,IAAAmB,EAAAhB,KACVK,IAAMC,IAtBU,2EAuBdC,KAAK,SAAAC,GAAM,OAAKQ,EAAKP,SAAS,CAACM,MAAMP,EAAOG,KAAKI,MAAOF,WAAW,kDAIpEb,KAAKI,WACLJ,KAAKiB,4CAKNC,QAAQC,IAAInB,KAAKc,MAAMJ,UACvBQ,QAAQC,IAAInB,KAAKc,MAAMC,OAFhB,IAGAL,EAAYV,KAAKc,MAAjBJ,SACAK,EAASf,KAAKc,MAAdC,MAGN,OAAGf,KAAKc,MAAMD,UACNO,EAAAC,EAAAC,cAAA,wBAGNF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAIZ,EAASa,UACZzB,OAAO0B,OAAOT,GAAOU,IAAI,SAAAC,GAAI,OAC5BN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,EAAKE,IAAKF,EAAKG,iBA3CbC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.3e817c87.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\n\n\nconst API_GAMES = 'https://itch.io/api/1/HgdeG8jYZpPwgmQVN4QYdm0RcLg7Gm6IMfUFToPi/my-games';\nconst API_PROFILE = 'https://itch.io/api/1/HgdeG8jYZpPwgmQVN4QYdm0RcLg7Gm6IMfUFToPi/me';\n\nclass App extends Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tprofiles: [],\n\t\t\tgames: [],\n\t\t\tisLoading: true,\n\t\t};\n\t}\n\n\tgetUsers = () => {\n\t\taxios.get(API_PROFILE)\n\t\t\t.then(result =>  this.setState({profiles:result.data.user, isLoading: false})\n      )\n\t}\n\n\tgetGames() {\n\t\taxios.get(API_GAMES)\n\t\t\t.then(result =>  this.setState({games:result.data.games, isLoading: false}))\n\t}\n\n\tcomponentDidMount(){\n\t\t\tthis.getUsers();\n\t\t\tthis.getGames();\n\t};\n\n\n\trender(){\n\t\tconsole.log(this.state.profiles);\n\t\tconsole.log(this.state.games);\n\t\tconst {profiles} = this.state;\n\t\tconst {games} = this.state;\n\n\n\t\t\tif(this.state.isLoading){\n\t\t\t\treturn <h1>a carregar</h1>\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t<p>{profiles.username}</p>\n\t\t\t\t\t{Object.values(games).map(game =>\n\t\t\t\t\t\t\t<li key={game.id}>{game.title}</li>\n\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t\t\t\n\t\t\t}\n\n\t\t\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}